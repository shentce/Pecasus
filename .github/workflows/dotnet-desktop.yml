# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application 
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: self-hosted  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: ConsumeProcessor\ConsumeProcessor.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: IProcessor    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: ConsumeProcessor\ConsumeProcessor                # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Step 1 - Create a temporary artifact downloads folder
      run: mkdir downloads
    
    - name: step 2 - Add artifacts to publish to the temp folder
      run: |
        cd downloads
        echo 'alpha'    > alpha.html
        echo 'bravo'    > bravo.html
        echo 'charlie'  > charlie.html
        cd ..

    - name: Step 3 - Use the Upload Artifact GitHub Action
      uses: actions/upload-artifact@v2
      with: 
        name: assets-for-download
        path: downloads

    - uses: Stockopedia/action-get-changed-files@v1
      id: get_changed
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        ignore: "**/*.js" # glob
        foldersOnly: true # to only include folders in the output
        format: json # either json, csv or newline
        
    - name: Echo
      run: echo ${{ steps.get_changed.outputs.changed }}

    - name: Email notify action step
      id: email
      uses: platform-chassis/send-email-action@latest
      with:
          email-list: 'shentce@gmail.com'
          email-header: 'test mail'
          email-body: 'test body'
          email-format: 'html'
        
    # Example 1
   # - name: Get changed files
   #   id: changed-files
   #   uses: tj-actions/changed-files@v35
    #  with:
     #    since_last_remote_commit: true 
      #   input_path:  $GITHUB_WORKSPACE
       #  files: |
        #  $GITHUB_WORKSPACE
         
      # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
      
   # - name: List all changed files
    #  run: |
    #    for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
     #     echo "$file was changed"
     #   done

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    #- name: Test
     # run: VSTest.Console.EXE SerialProcessTest.dll --no-restore --verbosity normal

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
       Configuration: ${{ matrix.configuration }}
        
     # run: build the applicatioin
    - name: build the application
      run: msbuild $env:Solution_Name /t:build /p:Configuration=$env:Configuration
      env:
       Configuration: ${{ matrix.configuration }}


    - name: create log
      if: always()
      id: createlog
      run: |
        curl --request GET \
          -H "Accept: application/vnd.github.v3+json" \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          https://api.github.com/repos/${{github.owner}}/${{github.repository}}/actions/runs/${{ github.run_id }}/logs
    
    #- name: setup python
    #    uses:actions/setup-python@v2
    #  with:
    #      python-version: 3.8 #install the python needed    
        
    #- name: Build CCAF applications and libraries
    #  run: |
    #    echo "Hello"
    #    # ./build.sh --automation-mode --ivi-interface   
    #     python msbuilder.py
    #    echo "end"
    #  shell: pwsh
      
    

    # Decode the base 64 encoded pfx and save the Signing_Certificate
#     - name: Decode the pfx
#       run: |
#         $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
#         $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
#         [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
#     - name: Create the app package
#       run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
#       env:
#         Appx_Bundle: Always
#         Appx_Bundle_Platforms: x86|x64
#         Appx_Package_Build_Mode: StoreUpload
#         Configuration: ${{ matrix.configuration }}

    # Remove the pfx
#     - name: Remove the pfx
#       run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v3
#       with:
#         name: MSIX Package
#         path: ${{ env.Wap_Project_Directory }}\AppPackages

   # - name: Send mail
     # if: failure()
     # uses: dawidd6/action-send-mail@v2
     # with:
        # mail server settings
      #  server_address: smtp.gmail.com
       # server_port: 465
        # user credentials
       # username: "shentce"
       # password: "ctrgfrxhumwyyscg"
        # email subject
       # subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
        # email body as text
       # body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }} - Test
        # comma-separated string, send email to
        # to: shentce@gmail.com
        # from email name
        # from: shentce@gmail.com
